package repositories

import (
	"database/sql"
	"ecommerce/internal/models"
)

// Interface ‡∏Ñ‡∏∑‡∏≠ "‡∏™‡∏±‡∏ç‡∏ç‡∏≤" ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ method ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
type ProductRepository interface {
	GetAll() ([]models.Product, error)
	GetByID(id int) (*models.Product, error)
	UpdateStock(id int, stock int) error
}

// productRepository struct - ‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// struct ‡∏ô‡∏µ‡πâ‡∏à‡∏∞ implement ProductRepository interface
type productRepository struct {
	db *sql.DB // ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
}

// ‡∏£‡∏±‡∏ö database connection ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞ return ProductRepository interface
func NewProductRepository(db *sql.DB) ProductRepository {
	return &productRepository{db: db}
}

// GetAll - ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
func (r *productRepository) GetAll() ([]models.Product, error) {
	// SQL Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
	// ‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏Å‡πá‡πÑ‡∏î‡πâ
	// COALESCE ‡∏à‡∏∞ return empty string ‡∏ñ‡πâ‡∏≤ url ‡πÄ‡∏õ‡πá‡∏ô NULL
	query := `
		SELECT p.id, p.sku, p.name, p.description, p.price_cents, p.currency, p.stock, 
		       COALESCE(pi.url, '') as image_url
		FROM products p
		LEFT JOIN product_images pi ON p.id = pi.product_id AND pi.is_primary = true
		ORDER BY p.id
	`

	// Execute query ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö rows ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
	rows, err := r.db.Query(query)
	if err != nil {
		return nil, err // ‡∏ñ‡πâ‡∏≤ query ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î return error
	}
	defer rows.Close() // ‡∏õ‡∏¥‡∏î rows ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á slice ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	var products []models.Product

	// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
	for rows.Next() {
		var p models.Product
		// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å row ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô struct
		// ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö SELECT statement
		err := rows.Scan(&p.ID, &p.SKU, &p.Name, &p.Description,
			&p.PriceCents, &p.Currency, &p.Stock, &p.ImageURL)
		if err != nil {
			return nil, err // ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î return error
		}
		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô slice
		products = append(products, p)
	}

	return products, nil // return ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
}

// üîç GetByID - ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID
func (r *productRepository) GetByID(id int) (*models.Product, error) {
	// üìù SQL Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ID
	// ‡πÉ‡∏ä‡πâ $1 ‡πÄ‡∏õ‡πá‡∏ô placeholder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parameter (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL injection)
	query := `
		SELECT p.id, p.sku, p.name, p.description, p.price_cents, p.currency, p.stock,
		       COALESCE(pi.url, '') as image_url
		FROM products p
		LEFT JOIN product_images pi ON p.id = pi.product_id AND pi.is_primary = true
		WHERE p.id = $1
	`

	var p models.Product
	// üéØ QueryRow ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 1 ‡πÅ‡∏ñ‡∏ß
	// ‡∏™‡πà‡∏á id ‡πÄ‡∏õ‡πá‡∏ô parameter ‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà $1
	err := r.db.QueryRow(query, id).Scan(&p.ID, &p.SKU, &p.Name, &p.Description,
		&p.PriceCents, &p.Currency, &p.Stock, &p.ImageURL)
	if err != nil {
		return nil, err // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î return error
	}

	return &p, nil // ‚úÖ return pointer ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
}

// üìä UpdateStock - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
func (r *productRepository) UpdateStock(id int, stock int) error {
	// üìù SQL Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å
	// ‡πÉ‡∏ä‡πâ $1, $2 ‡πÄ‡∏õ‡πá‡∏ô placeholder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parameters
	query := `UPDATE products SET stock = $1 WHERE id = $2`

	// üîß Execute update query
	// Exec ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (INSERT, UPDATE, DELETE)
	_, err := r.db.Exec(query, stock, id)
	return err // return error (‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô nil ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
}

// üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
// 1. ‡πÉ‡∏ä‡πâ pointer receiver (r *productRepository) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£ copy struct
// 2. ‡πÉ‡∏ä‡πâ parameterized query ($1, $2) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL injection
// 3. ‡πÉ‡∏ä‡πâ defer rows.Close() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ connection ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î
// 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ database operation
