package controllers

import (
	"log"
	"strconv"
	"strings"

	"ecommerce/internal/services"
	"ecommerce/internal/views"

	"github.com/gin-gonic/gin"
)

// ProductController struct - ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ HTTP requests ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
// Controller ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á HTTP request ‡πÅ‡∏•‡∏∞ business logic (‡∏ú‡πà‡∏≤‡∏ô Service)
type ProductController struct {
	service services.ProductService // Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic
}

// NewProductController - Factory function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á controller
// ‡∏£‡∏±‡∏ö service ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ controller ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ business logic ‡πÑ‡∏î‡πâ
func NewProductController(service services.ProductService) *ProductController {
	return &ProductController{service: service}
}

// ‡∏£‡∏±‡∏ö gin.Context ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HTTP request ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á response
func (ctrl *ProductController) ListProducts(c *gin.Context) {
	log.Println("üéÆ Controller: Handling list products request")

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	// Service ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Repository
	products, err := ctrl.service.GetAllProducts()
	if err != nil {
		// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ log error ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á error response
		log.Printf("‚ùå Controller: Error getting products: %v", err)
		views.InternalServerErrorResponse(c, "Failed to retrieve products")
		return // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
	}

	// ‡πÉ‡∏ä‡πâ View ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response
	response := views.FormatProductList(products)

	// ‡∏™‡πà‡∏á success response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	log.Printf("‚úÖ Controller: Successfully returned %d products", len(products))
	views.SuccessResponse(c, 200, response)
}

// GetProduct - Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET /products/:id (‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID)
func (ctrl *ProductController) GetProduct(c *gin.Context) {
	log.Println("üéÆ Controller: Handling get product request")

	// Step 1: ‡∏î‡∏∂‡∏á parameter "id" ‡∏à‡∏≤‡∏Å URL path
	// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: GET /products/123 ‡∏à‡∏∞‡πÑ‡∏î‡πâ idStr = "123"
	idStr := c.Param("id")
	log.Printf("Controller: Requested product ID: %s", idStr)

	// Step 2: ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô integer
	id, err := strconv.Atoi(idStr)
	if err != nil {
		// ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏á‡∏°‡∏≤ "abc") ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á validation error
		log.Printf("‚ùå Controller: Invalid product ID format: %s", idStr)
		views.ValidationErrorResponse(c, "Product ID must be a valid number")
		return
	}

	// Step 3: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID
	// Service ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic, validation ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Repository
	product, err := ctrl.service.GetProductByID(id)
	if err != nil {
		log.Printf("‚ùå Controller: Error getting product ID %d: %v", id, err)
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó error ‡∏à‡∏≤‡∏Å Service
		if strings.Contains(err.Error(), "not found") {
			// ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ = 404 Not Found
			views.NotFoundResponse(c, "Product")
		} else if strings.Contains(err.Error(), "must be greater than 0") {
			// Validation error = 400 Bad Request
			views.ValidationErrorResponse(c, err.Error())
		} else {
			// error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ = 500 Internal Server Error
			views.InternalServerErrorResponse(c, "Failed to retrieve product")
		}
		return
	}

	// Step 4: ‡∏™‡πà‡∏á success response
	log.Printf("‚úÖ Controller: Successfully returned product: %s (ID: %d)", product.Name, product.ID)
	views.SuccessResponse(c, 200, product)
}

// UpdateStock - Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PUT /products/:id/stock (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
func (ctrl *ProductController) UpdateStock(c *gin.Context) {
	log.Println("üéÆ Controller: Handling update stock request")

	// Step 1: ‡∏î‡∏∂‡∏á product ID ‡∏à‡∏≤‡∏Å URL parameter
	idStr := c.Param("id")
	log.Printf("üì¶ Controller: Updating stock for product ID: %s", idStr)

	id, err := strconv.Atoi(idStr)
	if err != nil {
		log.Printf("‚ùå Controller: Invalid product ID format: %s", idStr)
		views.ValidationErrorResponse(c, "Product ID must be a valid number")
		return
	}

	// Step 2: ‡∏î‡∏∂‡∏á admin secret ‡∏à‡∏≤‡∏Å header
	adminSecret := c.GetHeader("X-Admin-Secret")
	if adminSecret == "" {
		log.Printf("üö´ Controller: Missing admin secret header from IP: %s", c.ClientIP())
		views.UnauthorizedResponse(c, "Admin secret header required")
		return
	}

	// Step 3: ‡∏≠‡πà‡∏≤‡∏ô JSON request body
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stock
	type StockRequest struct {
		Stock int `json:"stock"` // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
	}
	var req StockRequest

	// ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏à‡∏≤‡∏Å request body ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô struct
	if err := c.BindJSON(&req); err != nil {
		log.Printf("‚ùå Controller: Invalid JSON in stock update request: %v", err)
		views.ValidationErrorResponse(c, "Invalid JSON format")
		return
	}

	// Step 4: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å
	// Service ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic, validation, authentication ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Repository
	if err := ctrl.service.UpdateProductStock(id, req.Stock, adminSecret); err != nil {
		log.Printf("‚ùå Controller: Error updating stock: %v", err)

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó error ‡∏à‡∏≤‡∏Å Service
		if strings.Contains(err.Error(), "invalid admin credentials") ||
			strings.Contains(err.Error(), "admin secret not configured") {
			// Authentication error = 401 Unauthorized
			views.UnauthorizedResponse(c, "Invalid admin credentials")
		} else if strings.Contains(err.Error(), "not found") {
			// Product not found = 404 Not Found
			views.NotFoundResponse(c, "Product")
		} else if strings.Contains(err.Error(), "must be greater than 0") ||
			strings.Contains(err.Error(), "cannot be negative") {
			// Validation error = 400 Bad Request
			views.ValidationErrorResponse(c, err.Error())
		} else {
			// error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ = 500 Internal Server Error
			views.InternalServerErrorResponse(c, "Failed to update stock")
		}
		return
	}

	// Step 5: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	log.Printf("‚úÖ Controller: Successfully updated stock for product ID %d to %d", id, req.Stock)

	// ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö response
	response := views.FormatStockUpdate(id, req.Stock, "Stock updated successfully")

	// ‡∏™‡πà‡∏á success response
	views.SuccessResponse(c, 200, response)
}

// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
// 1. Controller ‡πÑ‡∏°‡πà‡∏°‡∏µ business logic ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô
// 2. ‡πÉ‡∏ä‡πâ Service Layer ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic ‡πÅ‡∏ó‡∏ô
// 3. ‡∏ï‡πâ‡∏≠‡∏á validate input ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ Service
// 4. ‡πÉ‡∏ä‡πâ Views ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö response ‡πÉ‡∏´‡πâ‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
// 5. Log ‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ debug
// 6. Return ‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error (Guard Clause pattern)
// 7. Service ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error handling ‡πÅ‡∏•‡∏∞ business validation
