package services

import (
	"errors"
	"fmt"
	"log"
	"os"

	"ecommerce/internal/models"
	"ecommerce/internal/repositories"
)

// Service Layer ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Controller ‡πÅ‡∏•‡∏∞ Repository
// ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic, validation, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
type ProductService interface {
	GetAllProducts() ([]models.Product, error)                      //  ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	GetProductByID(id int) (*models.Product, error)                 //  ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID
	UpdateProductStock(id int, stock int, adminSecret string) error //  ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
}

// productService struct - ‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà implement ProductService interface
type productService struct {
	repo repositories.ProductRepository // üóÑÔ∏è Repository ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
}

// Factory function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á service
func NewProductService(repo repositories.ProductRepository) ProductService {
	return &productService{repo: repo}
}

// GetAllProducts - ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (business logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
func (s *productService) GetAllProducts() ([]models.Product, error) {
	log.Println("Service: Starting to retrieve all products")

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	products, err := s.repo.GetAll()
	if err != nil {
		log.Printf("‚ùå Service: Failed to retrieve products from repository: %v", err)
		return nil, fmt.Errorf("failed to retrieve products: %w", err)
	}

	log.Printf("‚úÖ Service: Successfully retrieved %d products", len(products))

	// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° business logic ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô:
	// - ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
	// - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©
	// - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î

	return products, nil
}

// üîç GetProductByID - ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏° business logic
func (s *productService) GetProductByID(id int) (*models.Product, error) {
	log.Printf("üîç Service: Starting to retrieve product with ID: %d", id)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if id <= 0 {
		log.Printf("‚ùå Service: Invalid product ID: %d", id)
		return nil, errors.New("product ID must be greater than 0")
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	product, err := s.repo.GetByID(id)
	if err != nil {
		log.Printf("‚ùå Service: Failed to retrieve product ID %d from repository: %v", id, err)

		// ‡πÅ‡∏õ‡∏•‡∏á error ‡∏à‡∏≤‡∏Å repository ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô business error
		if err.Error() == "sql: no rows in result set" {
			return nil, fmt.Errorf("product with ID %d not found", id)
		}
		return nil, fmt.Errorf("failed to retrieve product: %w", err)
	}

	log.Printf("‚úÖ Service: Successfully retrieved product: %s (ID: %d)", product.Name, product.ID)

	// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° business logic ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô:
	// - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	// - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
	// - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥

	return product, nil
}

// üìä UpdateProductStock - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° business logic ‡πÅ‡∏•‡∏∞ security
func (s *productService) UpdateProductStock(id int, stock int, adminSecret string) error {
	log.Printf("üìä Service: Starting stock update for product ID: %d, new stock: %d", id, stock)

	// üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö admin authentication
	if err := s.validateAdminAccess(adminSecret); err != nil {
		log.Printf("üö´ Service: Admin authentication failed: %v", err)
		return err
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö business rules
	if err := s.validateStockUpdate(id, stock); err != nil {
		log.Printf("‚ùå Service: Stock validation failed: %v", err)
		return err
	}

	// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	existingProduct, err := s.repo.GetByID(id)
	if err != nil {
		if err.Error() == "sql: no rows in result set" {
			log.Printf("‚ùå Service: Product ID %d not found", id)
			return fmt.Errorf("product with ID %d not found", id)
		}
		log.Printf("‚ùå Service: Error checking product existence: %v", err)
		return fmt.Errorf("failed to verify product existence: %w", err)
	}

	// üìù Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á stock
	log.Printf("üìà Service: Stock change for %s (ID: %d): %d ‚Üí %d",
		existingProduct.Name, id, existingProduct.Stock, stock)

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	if err := s.repo.UpdateStock(id, stock); err != nil {
		log.Printf("‚ùå Service: Failed to update stock in repository: %v", err)
		return fmt.Errorf("failed to update stock: %w", err)
	}

	log.Printf("‚úÖ Service: Successfully updated stock for product ID %d to %d", id, stock)

	// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° business logic ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô:
	// - ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥
	// - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit log
	// - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á

	return nil
}

// üîê validateAdminAccess - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
func (s *productService) validateAdminAccess(adminSecret string) error {
	expectedSecret := os.Getenv("ADMIN_SECRET")
	if expectedSecret == "" {
		return errors.New("admin secret not configured")
	}

	if adminSecret != expectedSecret {
		return errors.New("invalid admin credentials")
	}

	return nil
}

// ‚úÖ validateStockUpdate - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö business rules ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å
func (s *productService) validateStockUpdate(id int, stock int) error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID
	if id <= 0 {
		return errors.New("product ID must be greater than 0")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock value
	if stock < 0 {
		return errors.New("stock cannot be negative")
	}

	// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° business rules ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô:
	// - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
	// - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	// - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ

	return nil
}

// üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
// 1. Service Layer ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic ‡πÅ‡∏•‡∏∞ validation
// 2. ‡πÅ‡∏¢‡∏Å technical logic (database) ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å business logic
// 3. ‡∏ó‡∏≥‡πÉ‡∏´‡πâ code ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (testable)
// 4. Controller ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Repository ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
// 5. Service ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢ Repository ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
